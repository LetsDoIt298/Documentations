## To create a virtual env:-
		python -m venv myenv 
    Then enter into the ‘myenv’/Other name of envirment created And new environment python
    or enter below code:-
			myenv\Scripts\Activate
	if getting error, enter this first:-
			Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted

## To create a virtual env Method 2nd:-
		conda create -p venv python==3.11 -y
		conda activate "Path_of_project"

## To Close virtual env:-
		deactivate

## Open notebook of jupyter notebook
		Opend cmd
		Type this :-
				jupyter notebook --notebook-dir=NameOfTheDrive

## To push on github:-
		1)	git init
			if getting err:- 
				winget install --id Git.Git -e --source winget
		2)	git add .
		3)	git commit -am "Done"
		4)	git remote add origin <link> (e.g:- https://github.com/LetsDoIt298/Python.git)
			If error:-  
				git remote set-url origin <link> (e.g:- https://github.com/LetsDoIt298/Python.git))
		5)	git push origin master
			if getting error:-
				git pull --rebase origin main
				git push origin master

## To ignore sensitive filesto be added(like .evn file):-
		Create a file named .ignore:-
				echo "<File_NAME>" >> .gitignore (e.g:- echo ".env" >> .gitignore)
		Remove the .env file from the repository while keeping it locally:-
				git rm --cached .env
		Commit the changes:-
				git commit -m "Remove .env file from repository"
		Push the changes to the remote repository:-
				git push origin <your-branch>

## Check the Origing url:-
		git remote -v

## Check branch name, where git is pointing in terminal:-
		git branch


##Change branch name(where git is pointing in terminal):-
		git branch -m <old_branch_name> <new_branch_name> (e.g:- git branch -m master main)
		
## To check the branches:-
		git branch -r



## To push in existing branch:-
		git checkout <BranchName> (e.g:- test_branch)
		git push origin <BranchName> (e.g:- test_branch)

## To create a new branch :-
		git checkout -b <BranchName> (e.g:- test_branch)
		git push origin <BranchName> (e.g:- test_branch)

## To push Folder along with the default beanch(for this case 'main') in default benach:-
		git init
		git add .
		git commit -am "Done"
		git push origin <BranchName> (e.g:- main)
		If error:-
			1) First check if main branch exit or not, using:-
					git branch -r
			   If not then create main branch:-
					git checkout -b <BranchName> (e.g:- main)
			2) It could be the case we have uploaded some data using UI of github
			   now we are pushing code usingterminal, So for this first call data present in UI default franch:-
					git pull origin <BranchName> (e.g:- main)
					git push origin  <BranchName> (e.g:-main)

## To Get the code from github to Local system:-
		To get the code/all data in the current folder:-
		  		git clone -b <branck_name> <link> . (e.g:- git clone -b Version_1  https://github.com/LetsDoIt298/My-Site.git .)
		To get all code in a folder:-
				git clone -b <branch_name>  <link> <folder_name> (e.g:- git clone -b Version_1  https://github.com/LetsDoIt298/My-Site.git Test)

## In Terminal:-
		* To move back folder:-
					cd ..
		* To move inside a folder:-
					cd '<Folder Name>' (e.g:- 1)Text_Preprocessing)
		* To list folders:-
					ls
		* To make folder:-
					mkdir <Folder Name>
		* List all files:-
					dir
		* Remove a file:-
					rmdir <File_Name>


For ATS

python.exe -m pip install --upgrade pip
pip install -r requirements.txt
streamlit run "e:/Python/1) Application Tracking System(ATS)/app.py"

